package com.github.se.wanderpals.model.data

import java.time.LocalDate
import java.time.LocalDateTime
import java.time.LocalTime

/**
 * Represents a suggestion made by a user for a potential stop or activity within a trip.
 * Suggestions are interactive elements that can be discussed, voted on, and, if approved, added to
 * the trip's itinerary as a Stop.
 *
 * @param suggestionId The unique identifier for the suggestion, usually generated by the database.
 * @param userId The ID of the user who made the suggestion, linking it back to the user's profile.
 * @param userName The name of the user who made the suggestion, used for display purposes next to
 *   the suggestion.
 * @param text The main content of the suggestion, detailing what the user is proposing and the
 *   reasons for it.
 * @param createdAt The date when the suggestion was created, which helps in sorting suggestions
 *   chronologically.
 * @param createdAtTime The time when the suggestion was created, providing precise temporal context
 *   to the creation date, useful for time-sensitive suggestions.
 * @param stop A detailed Stop object proposed by the suggestion, which includes location, budget,
 *   and other relevant information. This Stop is directly embedded to simplify the process of
 *   converting an approved suggestion into an actual trip stop.
 * @param comments A list of comments made by other users in response to the suggestion. This
 *   facilitates discussion and feedback, allowing for collaborative planning and decision-making.
 * @param userLikes A list of user IDs who have liked the suggestion, indicating its popularity and
 *   acceptance among the community.
 *   @param voteIconClickable A boolean flag indicating whether the vote icon is clickable or not.
 *   @param voteStartTime The time when the countdown starts for the suggestion.
 */
data class Suggestion(
    val suggestionId: String = "",
    val userId: String = "",
    val userName: String = "",
    val text: String = "",
    val createdAt: LocalDate = LocalDate.of(0, 1, 1),
    val createdAtTime: LocalTime = LocalTime.of(0, 0), // Time of creation
    val stop: Stop = Stop(), // Embed the Stop object directly
    val comments: List<Comment> = emptyList(),
    val userLikes: List<String> = emptyList(),
    val voteIconClickable: Boolean = false,  // By default, the vote icon is not clickable
    // voteIconClickable implies countdownStarted has not started; voteIconClickable is false implies countdownStarted has started
    val voteStartTime: LocalDateTime = LocalDateTime.MIN // Use LocalDateTime to represent the start time
)