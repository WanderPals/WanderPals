package com.github.se.wanderpals.model.firestoreData

import com.github.se.wanderpals.model.data.GeoCords
import com.github.se.wanderpals.model.data.Stop
import java.time.LocalDate
import java.time.format.DateTimeFormatter

/**
 * Firestore-compatible DTO for a Stop, converting LocalDate to String for Firestore compatibility.
 * Facilitates easy data handling between the domain model (Stop) and Firestore.
 *
 * @property stopId Unique ID for the stop, typically generated by the database.
 * @property title Brief name or title of the stop.
 * @property address Physical address for easier navigation.
 * @property time Scheduled date for the stop in ISO-8601 format (yyyy-MM-dd).
 * @property budget Estimated expenses for activities at the stop.
 * @property description Additional details about the stop.
 * @property geoCords Coordinates pinpointing the stop's location.
 * @property website Optional URL for more information about the stop.
 * @property imageUrl Optional URL for an image of the stop.
 */
data class FirestoreStop(
    val stopId: String = "",
    val title: String = "",
    val address: String = "",
    val time: String = "", // Changed to String to accommodate Firestore
    val budget: Double = 0.0,
    val description: String = "",
    val geoCords: GeoCords, // Directly using GeoCords assuming it's Firestore compatible
    val website: String = "",
    val imageUrl: String = ""
) {
  companion object {
    /**
     * Converts a Stop model to FirestoreStop DTO, adapting LocalDate to String.
     *
     * @param stop The Stop object to convert.
     * @return A Firestore-compatible FirestoreStop DTO.
     */
    fun fromStop(stop: Stop): FirestoreStop {
      val formatter = DateTimeFormatter.ISO_LOCAL_DATE
      return FirestoreStop(
          stopId = stop.stopId,
          title = stop.title,
          address = stop.address,
          time = stop.time.format(formatter),
          budget = stop.budget,
          description = stop.description,
          geoCords = stop.geoCords,
          website = stop.website,
          imageUrl = stop.imageUrl)
    }
  }
  /**
   * Converts this FirestoreStop DTO back to a Stop model, parsing String to LocalDate.
   *
   * @return A Stop object with LocalDate fields.
   */
  fun toStop(): Stop {
    val formatter = DateTimeFormatter.ISO_LOCAL_DATE
    return Stop(
        stopId = stopId,
        title = title,
        address = address,
        time = LocalDate.parse(time, formatter),
        budget = budget,
        description = description,
        geoCords = geoCords, // Assuming no conversion needed
        website = website,
        imageUrl = imageUrl)
  }
}
