package com.github.se.wanderpals.model.firestoreData

import com.github.se.wanderpals.model.data.GeoCords
import com.github.se.wanderpals.model.data.Stop
import java.time.LocalDate
import java.time.LocalTime
import java.time.format.DateTimeFormatter

/**
 * Firestore-compatible DTO for a Stop, converting LocalDate and LocalTime to String for Firestore compatibility.
 * This facilitates easy data handling between the domain model (Stop) and Firestore, accommodating all necessary
 * details including the start time and duration of the stop.
 *
 * @property stopId Unique ID for the stop, typically generated by the database.
 * @property title Brief name or title of the stop.
 * @property address Physical address for easier navigation.
 * @property date Scheduled date for the stop in ISO-8601 format (yyyy-MM-dd).
 * @property startTime Scheduled start time of the stop in ISO-8601 format (HH:mm).
 * @property duration Duration of the stop's activity in minutes.
 * @property budget Estimated expenses for activities at the stop.
 * @property description Additional details about the stop.
 * @property geoCords Coordinates pinpointing the stop's location.
 * @property website Optional URL for more information about the stop.
 * @property imageUrl Optional URL for an image of the stop.
 */
data class FirestoreStop(
    val stopId: String = "",
    val title: String = "",
    val address: String = "",
    val date: String = "", // Date as String
    val startTime: String = "", // Start time as String
    val duration: Int = 0, // Duration in minutes
    val budget: Double = 0.0,
    val description: String = "",
    val geoCords: GeoCords, // Assuming GeoCords is Firestore compatible
    val website: String = "",
    val imageUrl: String = ""
) {
    companion object {
        /**
         * Converts a Stop model to FirestoreStop DTO, adapting LocalDate and LocalTime to String,
         * and preserving duration as an Int.
         *
         * @param stop The Stop object to convert.
         * @return A Firestore-compatible FirestoreStop DTO.
         */
        fun fromStop(stop: Stop): FirestoreStop {
            val dateFormatter = DateTimeFormatter.ISO_LOCAL_DATE
            val timeFormatter = DateTimeFormatter.ISO_LOCAL_TIME
            return FirestoreStop(
                stopId = stop.stopId,
                title = stop.title,
                address = stop.address,
                date = stop.date.format(dateFormatter),
                startTime = stop.startTime.format(timeFormatter),
                duration = stop.duration,
                budget = stop.budget,
                description = stop.description,
                geoCords = stop.geoCords,
                website = stop.website,
                imageUrl = stop.imageUrl)
        }
    }

    /**
     * Converts this FirestoreStop DTO back to a Stop model, parsing String to LocalDate and LocalTime,
     * while keeping duration as an Int.
     *
     * @return A Stop object with LocalDate and LocalTime fields.
     */
    fun toStop(): Stop {
        val dateFormatter = DateTimeFormatter.ISO_LOCAL_DATE
        val timeFormatter = DateTimeFormatter.ISO_LOCAL_TIME
        return Stop(
            stopId = stopId,
            title = title,
            address = address,
            date = LocalDate.parse(date, dateFormatter),
            startTime = LocalTime.parse(startTime, timeFormatter),
            duration = duration,
            budget = budget,
            description = description,
            geoCords = geoCords,
            website = website,
            imageUrl = imageUrl)
    }
}
